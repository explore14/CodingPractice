1405. Longest Happy String
Medium
A string s is called happy if it satisfies the following conditions:

s only contains the letters 'a', 'b', and 'c'.
s does not contain any of "aaa", "bbb", or "ccc" as a substring.
s contains at most a occurrences of the letter 'a'.
s contains at most b occurrences of the letter 'b'.
s contains at most c occurrences of the letter 'c'.
Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string "".

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: a = 1, b = 1, c = 7
Output: "ccaccbcc"
Explanation: "ccbccacc" would also be a correct answer.
Example 2:

Input: a = 7, b = 1, c = 0
Output: "aabaa"
Explanation: It is the only correct answer in this case.
 

Constraints:

0 <= a, b, c <= 100
a + b + c > 0


Background knowledge :

A heap and a priority queue are closely related concepts, but they are not exactly the same. Let me explain their relationship:
1. Heap:
•	A heap is a specific data structure, typically implemented as a binary heap.
•	In a min-heap, the smallest element is always at the top (the root), while in a max-heap, the largest element is at the top.
•	A heap is often implemented as a complete binary tree, where each parent node is smaller (min-heap) or larger (max-heap) than its children.
•	Operations like insertion, deletion, and getting the top element (min or max) can be done in O(log⁡n)O(\log n)O(logn) time.
2. Priority Queue:
•	A priority queue is an abstract data type (ADT) that allows elements to be inserted and removed based on priority.
•	The element with the highest priority is dequeued first.
•	The priority of the elements dictates their order in the queue. For example, a priority queue can be used to always remove the largest or smallest element.
Key Difference:
•	A priority queue is a concept or interface (an ADT), while a heap is a specific implementation of a priority queue.
Relationship:
•	A priority queue can be implemented using a heap (most commonly a binary heap), because heaps efficiently support the operations required by a priority queue, like retrieving and removing the highest (or lowest) priority element in O(log⁡n)O(\log n)O(logn) time.
•	However, a priority queue can also be implemented using other data structures, such as:
o	Unsorted or sorted arrays/lists.
o	Balanced binary search trees (BSTs), though heaps are generally more efficient for this purpose.
Summary:
•	A heap is a data structure used to implement a priority queue.
•	The terms are often used interchangeably because a binary heap is the most common and efficient way to implement a priority queue. However, a priority queue can technically be implemented using other data structures too.

In Java, the PriorityQueue class from the java.util package provides a simple and efficient implementation of a min-heap by default.
Max-Heap Implementation in Java:
To implement a max-heap in Java, we can pass a custom Comparator that reverses the natural ordering of the elements.
Option 1: Using a Custom Comparator

import java.util.PriorityQueue;
import java.util.Collections;

public class MaxHeapPriorityQueue {
    public static void main(String[] args) {
        // Create a PriorityQueue as a max-heap by using a custom comparator
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

        // Insert elements into the priority queue
        maxHeap.offer(3);
        maxHeap.offer(1);
        maxHeap.offer(5);

        // Peek at the largest element
        System.out.println("Top element (peek): " + maxHeap.peek());  // Output: 5

        // Remove and print elements in priority order (largest first)
        while (!maxHeap.isEmpty()) {
            System.out.println("Removed element (pop): " + maxHeap.poll());
        }
    }
}
Explanation:
•	Collections.reverseOrder() creates a comparator that reverses the natural ordering, turning the default min-heap into a max-heap.
•	Other operations (offer(), poll(), peek()) remain the same, but they now work in max-heap order (largest element first).

Using a Custom Comparator Inline (Lambda):
You can also define the comparator inline using Java 8's lambda expressions, especially for custom types.

import java.util.PriorityQueue;

public class MaxHeapPriorityQueueLambda {
    public static void main(String[] args) {
        // Create a max-heap using a lambda expression for reverse ordering
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);

        // Insert elements
        maxHeap.offer(3);
        maxHeap.offer(1);
        maxHeap.offer(5);

        // Peek at the largest element
        System.out.println("Top element (peek): " + maxHeap.peek());  // Output: 5

        // Remove and print elements in priority order (largest first)
        while (!maxHeap.isEmpty()) {
            System.out.println("Removed element (pop): " + maxHeap.poll());
        }
    }
}
Explanation:
•	The lambda expression (a, b) -> b - a reverses the natural order of integers, turning the min-heap into a max-heap.


In Java, StringBuilder is a class that is used to create and manipulate mutable sequences of characters. Unlike String, which is immutable (cannot be changed once created), StringBuilder allows you to modify the contents of the string without creating new objects, making it more efficient for operations that involve frequent string manipulations like concatenation, appending, or inserting.

Key Features of StringBuilder:
Mutability: You can modify the string without creating a new object. This makes StringBuilder more efficient than String when performing repeated string modifications.

No Synchronization: StringBuilder is not synchronized, which makes it faster than StringBuffer in a single-threaded environment. However, this also means that StringBuilder is not thread-safe, unlike StringBuffer.

Efficient Memory Usage: It dynamically resizes its buffer as needed when the string grows, which avoids the performance overhead of creating new string objects during each modification.

Common Operations:
Here are the most common methods used with StringBuilder.

append():

Appends a string, character, or other data type to the existing sequence.
Returns the same StringBuilder object, allowing method chaining.

StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
System.out.println(sb);  // Output: "Hello World"
insert():

Inserts a string, character, or other data type at a specified position.

StringBuilder sb = new StringBuilder("Hello");
sb.insert(5, " World");
System.out.println(sb);  // Output: "Hello World"
delete() and deleteCharAt():

Deletes characters in a specific range using delete(int start, int end).
Deletes a character at a specific index using deleteCharAt(int index).

StringBuilder sb = new StringBuilder("Hello World");
sb.delete(5, 11);  // Removes " World"
System.out.println(sb);  // Output: "Hello"

sb.deleteCharAt(0);  // Removes the first character
System.out.println(sb);  // Output: "ello"
replace():

Replaces characters within a specific range with a new string.

StringBuilder sb = new StringBuilder("Hello World");
sb.replace(6, 11, "Java");
System.out.println(sb);  // Output: "Hello Java"
reverse():

Reverses the entire character sequence.

StringBuilder sb = new StringBuilder("Hello");
sb.reverse();
System.out.println(sb);  // Output: "olleH"
setCharAt():

Sets a specific character at a given index.

StringBuilder sb = new StringBuilder("Hello");
sb.setCharAt(1, 'a');
System.out.println(sb);  // Output: "Hallo"
toString():

Converts the StringBuilder object into a String.

StringBuilder sb = new StringBuilder("Hello World");
String str = sb.toString();
System.out.println(str);  // Output: "Hello World"
length() and capacity():

length(): Returns the number of characters in the sequence.
capacity(): Returns the current capacity (storage size) of the StringBuilder object.

StringBuilder sb = new StringBuilder("Hello");
System.out.println(sb.length());    // Output: 5
System.out.println(sb.capacity());  // Output: 21 (default is 16, grows automatically)
Example Usage:

public class StringBuilderExample {
    public static void main(String[] args) {
        // Create a StringBuilder object
        StringBuilder sb = new StringBuilder("Hello");

        // Append a string
        sb.append(" World");
        System.out.println("Appended: " + sb);  // Output: "Hello World"

        // Insert a string
        sb.insert(5, ",");
        System.out.println("Inserted: " + sb);  // Output: "Hello, World"

        // Reverse the string
        sb.reverse();
        System.out.println("Reversed: " + sb);  // Output: "dlroW ,olleH"

        // Replace part of the string
        sb.reverse();  // Reverse it back to original
        sb.replace(7, 12, "Java");
        System.out.println("Replaced: " + sb);  // Output: "Hello, Java"
    }
}
When to Use StringBuilder:
Performance: Use StringBuilder when you need to perform multiple string manipulations (like appending, inserting, or deleting) in a single-threaded environment.
Efficiency: Since StringBuilder doesn’t create new objects for every modification, it’s more efficient than using String for frequent updates to a string.
Summary:
StringBuilder is ideal for efficiently modifying strings in a single-threaded environment.
It provides several methods like append(), insert(), delete(), and reverse() for string manipulation.
It's faster than String and StringBuffer for repeated string operations, but it's not thread-safe. If you need thread safety, use StringBuffer.



The line:

PriorityQueue<Pair> pq = new PriorityQueue<Pair>((x, y) -> (y.count - x.count));
is using a lambda expression to define a custom comparator for the PriorityQueue. This comparator is responsible for ordering the elements inside the priority queue based on their count values in descending order. Here's the breakdown of what this line does:

Breakdown of the Components:
PriorityQueue<Pair>:

This creates a priority queue where the elements are objects of type Pair.
The Pair class is assumed to have at least two fields: x (some value) and count (an integer representing a count).
Lambda Expression ((x, y) -> (y.count - x.count)):

Lambda Expression: A shorthand way of writing anonymous functions in Java 8+.
(x, y) are the parameters to the lambda function, which represent two Pair objects that are being compared.
Return Value: The expression (y.count - x.count) is used to determine the order of these two objects:
If y.count is greater than x.count, the result will be positive, meaning y should be ordered before x.
If x.count is greater than y.count, the result will be negative, meaning x should be ordered before y.
If x.count == y.count, the result will be 0, meaning they are equal in terms of priority.
Purpose of (y.count - x.count):

This ensures that the element with the higher count value is given higher priority (i.e., it will appear at the head of the queue).
It essentially implements a max-heap, where the Pair object with the highest count will be dequeued first. In a typical min-heap, the smallest element is dequeued first, but by flipping the subtraction, we reverse the ordering to make the largest element come first.
Explanation:
This is how the comparator works:

When comparing two Pair objects x and y, if y.count is greater than x.count, then y should come before x in the queue.
Therefore, this makes the PriorityQueue behave like a max-heap, where the element with the largest count will always be at the top of the queue.

To convert a StringBuilder to a String in Java, you can use the toString() method provided by the StringBuilder class. This method converts the contents of the StringBuilder into a String.






****CODE****

class Solution {
    public String longestDiverseString(int a, int b, int c) {
        PriorityQueue<P> pq = new PriorityQueue<>((x, y) -> (y.count - x.count));
        StringBuilder ans = new StringBuilder();

        if (a > 0) {
            pq.offer(new P('a', a));
        }
        if (b > 0) {
            pq.offer(new P('b', b));
        }
        if (c > 0) {
            pq.offer(new P('c', c));
        }

        while (!pq.isEmpty()) {
            P p = pq.poll();
            int count = p.count;
            char temp = p.ch;

            if (ans.length() < 2 || !(ans.charAt(ans.length() - 1) == temp && ans.charAt(ans.length() - 2) == temp)) {
                ans.append(temp);
                if (count - 1 > 0) {
                    pq.offer(new P(temp, count - 1));
                }
            } else {
                if (pq.isEmpty()) {
                    return ans.toString();
                }
                P p1 = pq.poll();
                int count1 = p1.count;
                char temp1 = p1.ch;
                ans.append(temp1);
                if (count1 - 1 > 0) {
                    pq.offer(new P(temp1, count1 - 1));
                }
                pq.offer(new P(temp, count));
            }
        }

        return ans.toString();
    }

    class P {
        char ch;
        int count;

        P(char ch, int count) {
            this.ch = ch;
            this.count = count;
        }
    }
}


******COMPLEXITY********
time complexity:
	O(n) 
space complexity:
	O(n)