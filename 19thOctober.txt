1545. Find Kth Bit in Nth Binary String

Given two positive integers n and k, the binary string Sn is formed as follows:

S1 = "0"
Si = Si - 1 + "1" + reverse(invert(Si - 1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

 

Example 1:

Input: n = 3, k = 1
Output: "0"
Explanation: S3 is "0111001".
The 1st bit is "0".
Example 2:

Input: n = 4, k = 11
Output: "1"
Explanation: S4 is "011100110110001".
The 11th bit is "1".
 

Constraints:

1 <= n <= 20
1 <= k <= 2n - 1


***Solved using brute force approach***
class Solution {
    StringBuilder[] s = new StringBuilder[21]; 

    public Solution() {
        // Initialize the first two sequences
        s[0] = new StringBuilder("0");
        s[1] = new StringBuilder("0");

        for (int i = 2; i <= 20; i++) {
            StringBuilder temp = new StringBuilder(s[i - 1]); 
            temp = invert(temp);  // Invert it
            s[i] = new StringBuilder(s[i - 1]).append("1").append(temp.reverse()); 
        }
    }

    public StringBuilder invert(StringBuilder st) {
        for (int i = 0; i < st.length(); i++) {
            if (st.charAt(i) == '1') {
                st.setCharAt(i, '0');  
            } else {
                st.setCharAt(i, '1');
            }
        }
        return st;
    }

    public char findKthBit(int n, int k) {
        String result = s[n].toString();  
        return result.charAt(k - 1);  
    }

}

Time complexity: O(2^n)
Space complexity: O(2^n)
